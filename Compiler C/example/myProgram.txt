program myProgram;

class miniCalc1

var result,id:integer;

procedure addOne(var input:integer);

var temp:integer;

begin
result := input + 1;
print(integer:result)
end;

end_class




class miniCalc2

var result:integer;


procedure findMax(var input:array[5] of integer);

var tempMax,index:integer;

begin
tempMax := input[0];
index := 1;

while (index < 5) do
begin

if (input[index] > tempMax) then tempMax := input[index] else tempMax := tempMax;

index := index + 1

end;

print(integer:tempMax)

end;

procedure testFunction(var v1,v2:real);

var v3,v4:integer;

begin

v3 := 5*v1;
v4 := 2.5*v2 + 5 mod 2;

if (v2 > v1 and v1 = 5) then print(real:v1) else print(real:v2);
print(integer:v3);
print(integer:v4);

if (5+5 > 1 or not 5 < 0) then begin
v4 := v4/v3;
print(integer:v4)
end
else return

end;


end_class


class fullCalc extends miniCalc1

var result:integer;

procedure add(var input:integer);

var temp:integer;

begin
addOne(input)
end;


procedure constructor(var temp:integer);

var temp2:real;

begin
;
end;

end_class



var calc:fullCalc;
var calc2:miniCalc2;
var arr:array[5] of integer;
var k:real;

begin

arr[0] := 5;
arr[1] := 6;
arr[2] := 8;
arr[3] := 5;
arr[4] := -2;


calc.constructor(5);
calc.add(5);


calc2.findMax(arr);

calc2.testFunction(1, 4)

end


.